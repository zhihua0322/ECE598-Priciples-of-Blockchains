{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0","program":"/home/zhihua/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","untrusted","/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=37d23e68072ab05a","-C","extra-filename=-37d23e68072ab05a","--out-dir","/mnt/c/Users/86719/Coding/archival_node/target/rls/debug/deps","-L","dependency=/mnt/c/Users/86719/Coding/archival_node/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/zhihua/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/mnt/c/Users/86719/Coding/archival_node/target/rls/debug/deps/libuntrusted-37d23e68072ab05a.rmeta"},"prelude":{"crate_id":{"name":"untrusted","disambiguator":[13550294078251648738,2047560183643773816]},"crate_root":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src","external_crates":[{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","num":1,"id":{"name":"core","disambiguator":[5366521311420338507,5001693844293236078]}},{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16078967021793905033,18044181950654841110]}},{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[3256375668792353550,7694578384779899277]}}],"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":770,"byte_end":14157,"line_start":15,"line_end":375,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":770,"byte_end":14157,"line_start":15,"line_end":375,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":69},{"krate":0,"index":82},{"krate":0,"index":80},{"krate":0,"index":77},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":13},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":92},{"krate":0,"index":103},{"krate":0,"index":102},{"krate":0,"index":100},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":58}],"decl_id":null,"docs":" untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation\n parsing of untrusted inputs in Rust.","sig":null,"attributes":[{"value":"deny(unused_qualifications)","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5016,"byte_end":5047,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"forbid(anonymous_parameters, box_pointers, legacy_directory_ownership,\n         missing_docs, trivial_casts, trivial_numeric_casts, unsafe_code,\n         unstable_features, unused_extern_crates, unused_import_braces,\n         unused_results, variant_size_differences, warnings)","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5048,"byte_end":5356,"line_start":89,"line_end":103,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5357,"byte_end":5367,"line_start":104,"line_end":104,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5532,"byte_end":5537,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"Input","qualname":"::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":71}],"decl_id":null,"docs":" A wrapper around `&'a [u8]` that helps in writing panic-free code.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5678,"byte_end":5682,"line_start":116,"line_end":116,"column_start":18,"column_end":22},"name":"from","qualname":"<Input>::from","value":"fn (bytes: &'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Input` for the given input `bytes`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":6271,"byte_end":6279,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Input>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the input is empty and false otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":6250,"byte_end":6259,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":6390,"byte_end":6393,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"len","qualname":"<Input>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `Input`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":6369,"byte_end":6378,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":6640,"byte_end":6648,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Input>::read_all","value":"fn <F, R, E> (&self, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. If `read` does not consume the entire input,\n `incomplete_read` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7140,"byte_end":7158,"line_start":154,"line_end":154,"column_start":12,"column_end":30},"name":"as_slice_less_safe","qualname":"<Input>::as_slice_less_safe","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Access the input as a slice so it can be processed by functions that\n are not written using the Input/Reader framework.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7119,"byte_end":7128,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":8119,"byte_end":8136,"line_start":185,"line_end":185,"column_start":8,"column_end":25},"name":"read_all_optional","qualname":"::read_all_optional","value":"fn <'a, F, R, E> (input: Option<Input<'a>>, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. When `input` is `None`, `read` will be\n called with `None`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9267,"byte_end":9273,"line_start":217,"line_end":217,"column_start":12,"column_end":18},"name":"Reader","qualname":"::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" A read-only, forward-only* cursor into the data in an `Input`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":37},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9398,"byte_end":9402,"line_start":223,"line_end":223,"column_start":12,"column_end":16},"name":"Mark","qualname":"::Mark","value":"Mark {  }","parent":null,"children":[{"krate":0,"index":38}],"decl_id":null,"docs":" An index into the already-parsed input of a `Reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9611,"byte_end":9614,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader>::new","value":"fn (input: Input<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Reader for the given input. Use `read_all` or\n `read_all_optional` instead of `Reader::new` whenever possible.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9590,"byte_end":9599,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9846,"byte_end":9852,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"at_end","qualname":"<Reader>::at_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the reader is at the end of the input, and `false`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9825,"byte_end":9834,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10034,"byte_end":10057,"line_start":246,"line_end":246,"column_start":12,"column_end":35},"name":"get_input_between_marks","qualname":"<Reader>::get_input_between_marks","value":"fn (&self, mark1: Mark, mark2: Mark) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Input` for already-parsed input that has had its boundaries\n marked using `mark`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10013,"byte_end":10022,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10433,"byte_end":10437,"line_start":258,"line_end":258,"column_start":12,"column_end":16},"name":"mark","qualname":"<Reader>::mark","value":"fn (&self) -> Mark","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of the `Reader` for future use in a call\n to `get_input_between_marks`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10412,"byte_end":10421,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10633,"byte_end":10637,"line_start":263,"line_end":263,"column_start":12,"column_end":16},"name":"peek","qualname":"<Reader>::peek","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more byte in the input and that\n byte is equal to `b`, and false otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10612,"byte_end":10621,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10990,"byte_end":10999,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"read_byte","qualname":"<Reader>::read_byte","value":"fn (&mut self) -> Result<u8, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input byte.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":10969,"byte_end":10978,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":11509,"byte_end":11519,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"read_bytes","qualname":"<Reader>::read_bytes","value":"fn (&mut self, num_bytes: usize) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input, returning the skipped input as an\n `Input`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":11488,"byte_end":11497,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":11994,"byte_end":12011,"line_start":305,"line_end":305,"column_start":12,"column_end":29},"name":"read_bytes_to_end","qualname":"<Reader>::read_bytes_to_end","value":"fn (&mut self) -> Input<'a>","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input, returning the skipped input\n as an `Input`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":11973,"byte_end":11982,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":12348,"byte_end":12360,"line_start":313,"line_end":313,"column_start":12,"column_end":24},"name":"read_partial","qualname":"<Reader>::read_partial","value":"fn <F, R, E> (&mut self, read: F) -> Result<(Input<'a>, R), E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read()` with the given input as a `Reader`. On success, returns a\n pair `(bytes_read, r)` where `bytes_read` is what `read()` consumed and\n `r` is `read()`'s return value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":12878,"byte_end":12882,"line_start":330,"line_end":330,"column_start":12,"column_end":16},"name":"skip","qualname":"<Reader>::skip","value":"fn (&mut self, num_bytes: usize) -> Result<(), EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":12857,"byte_end":12866,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":13069,"byte_end":13080,"line_start":336,"line_end":336,"column_start":12,"column_end":23},"name":"skip_to_end","qualname":"<Reader>::skip_to_end","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":13048,"byte_end":13057,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":13309,"byte_end":13319,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"EndOfInput","qualname":"::EndOfInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used to indicate the end of the input was reached before the\n operation could be completed.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5588,"byte_end":5593,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7245,"byte_end":7250,"line_start":157,"line_end":157,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7538,"byte_end":7543,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7704,"byte_end":7709,"line_start":172,"line_end":172,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9431,"byte_end":9437,"line_start":227,"line_end":227,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":13548,"byte_end":13553,"line_start":353,"line_end":353,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":5588,"byte_end":5593,"line_start":114,"line_end":114,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7245,"byte_end":7250,"line_start":157,"line_end":157,"column_start":29,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2227}},{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7538,"byte_end":7543,"line_start":165,"line_end":165,"column_start":31,"column_end":36},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":7704,"byte_end":7709,"line_start":172,"line_end":172,"column_start":26,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2045}},{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":9431,"byte_end":9437,"line_start":227,"line_end":227,"column_start":10,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/zhihua/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.7.0/src/untrusted.rs","byte_start":13548,"byte_end":13553,"line_start":353,"line_end":353,"column_start":14,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":105},"to":{"krate":4294967295,"index":4294967295}}]}